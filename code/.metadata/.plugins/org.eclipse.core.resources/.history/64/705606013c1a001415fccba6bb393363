package ch.desm.middleware.modules.component.cabine.re420;

import java.util.ArrayList;

import org.apache.log4j.Logger;

import ch.desm.middleware.modules.communication.broker.Broker;
import ch.desm.middleware.modules.communication.endpoint.serial.ubw32.EndpointUbw32ListenerInterface;
import ch.desm.middleware.modules.communication.message.MessageBase;
import ch.desm.middleware.modules.communication.message.router.MessageRouter;
import ch.desm.middleware.modules.communication.message.translator.MessageTranslatorMiddleware;
import ch.desm.middleware.modules.communication.message.type.MessageCommon;
import ch.desm.middleware.modules.communication.message.type.MessageMiddleware;
import ch.desm.middleware.modules.communication.message.type.MessageUbw32Base;
import ch.desm.middleware.modules.component.cabine.re420.maps.Re420MapMiddleware;

public class Re420BaseImpl extends Re420Base implements
		EndpointUbw32ListenerInterface {

	private static Logger log = Logger.getLogger(Re420BaseImpl.class);

	public Re420MapMiddleware mapMiddlewareMessages;
	private Re420MessageConverter converter;
	
	public Re420BaseImpl(Broker broker, Re420EndpointUbw32 endpoint, Re420EndpointFabisch endpointFabisch) {
		super(broker, endpoint, endpointFabisch);

		this.mapMiddlewareMessages = new Re420MapMiddleware();
		this.converter = new Re420MessageConverter();
	}

	/**
	 * 
	 */
	protected void onIncomingBrokerMessage(String message) {

		MessageTranslatorMiddleware translator = new MessageTranslatorMiddleware();

		ArrayList<MessageMiddleware> messageCommon = translator
				.translateToCommonMiddlewareMessageList(message);
		
		MessageRouter router = new MessageRouter();
		router.processBrokerMessage(this, messageCommon);
	}

	/**
	 * TODO implementation
	 * 
	 * @param message
	 */
	public void onIncomingEndpointMessage(String message) {
		
		MessageTranslatorMiddleware translator = new MessageTranslatorMiddleware();
		
		MessageUbw32Base ubw32Message = translator
				.decodeUbw32EndpointMessage(message,
						MessageCommon.MESSAGE_TOPIC_CABINE_RE420_UBW32);

		if(ubw32Message != null){
			
			String messages = converter.convertToMiddlewareMessage(this, ubw32Message, mapMiddlewareMessages);
			
			MessageRouter router = new MessageRouter();
			router.processEndpointMessage(this, messages,
					MessageBase.MESSAGE_TOPIC_CABINE_RE420_UBW32);
		}
	}
	
	/**
	 * 
	 */
	@Override
	public boolean hasTopicSigned(String topic) {
		return signedTopic.contains(topic);
	}
	
	/**
	 * 
	 */
	@Override
	protected void intializeSignedTopic() {
		signedTopic.add(MessageBase.MESSAGE_TOPIC_SIMULATION_LOCSIM);
		signedTopic.add(MessageBase.MESSAGE_TOPIC_CABINE_RE420_UBW32);
		signedTopic.add(MessageBase.MESSAGE_TOPIC_SIMULATION_LOCSIM_RS232);
		signedTopic.add(MessageBase.MESSAGE_TOPIC_CABINE_RE420_FABISCH);
	}

}
