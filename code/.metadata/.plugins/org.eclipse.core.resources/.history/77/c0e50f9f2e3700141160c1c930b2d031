package ch.desm.middleware.modules.communication.endpoint.tcpip;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;

import ch.desm.middleware.modules.core.daemon.DaemonThread;

public class EndpointTcpServer extends DaemonThread {

	String args[];

	public EndpointTcpServer(String[] args) {
		super("EndpointTcpServer");
		
		this.args = args;
		try {
			initialize();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	public void initialize() throws IOException {

		  int BUFSIZE = 32;   // Size of receive buffer

		 

		    if (args.length != 1)  // Test for correct # of args
		      throw new IllegalArgumentException("Parameter(s): <Port>");

		    int servPort = Integer.parseInt(args[0]);

		    // Create a server socket to accept client connection requests
		    ServerSocket servSock = new ServerSocket(servPort);

		    int recvMsgSize;   // Size of received message
		    byte[] byteBuffer = new byte[BUFSIZE];  // Receive buffer

		    while(true) { // Run forever, accepting and servicing connections
		      Socket clntSock = servSock.accept();     // Get client connection

		      System.out.println("Handling client at " +
		        clntSock.getInetAddress().getHostAddress() + " on port " +
		             clntSock.getPort());

		      InputStream in = clntSock.getInputStream();
		      OutputStream out = clntSock.getOutputStream();

		      // Receive until client closes connection, indicated by -1 return
		      while ((recvMsgSize = in.read(byteBuffer)) != -1)
		        out.write(byteBuffer, 0, recvMsgSize);

		      clntSock.close();  // Close the socket.  We are done with this client!
		    }
	}
}
