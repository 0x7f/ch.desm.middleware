package ch.desm.middleware.modules.communication.endpoint.tcp;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.SocketException;

import org.apache.log4j.Logger;

import ch.desm.middleware.modules.communication.endpoint.EndpointThreadBase;

public class EndpointTcpClientThread extends EndpointThreadBase {

	private static Logger log = Logger.getLogger(EndpointTcpClientThread.class);
	public static final int THREAD_SLEEP = 256;

	private EndpointTcpClient endpoint;
	String sendBuffer;
	String receiveBuffer;
	static final int byteBuffer = 512;

	public EndpointTcpClientThread(EndpointTcpClient endpoint) {
		super("EndpointTcpClientThread");
		this.endpoint = endpoint;
	}

	public void sendStream(String stream) {

		try {

			OutputStream out = endpoint.client.getOutputStream();

			byte[] byteBuffer = stream.getBytes();
			out.write(byteBuffer); // Send the encoded string to the server

			log.info("Client (" + this.getClass() + ") send stream: "
					+ new String(byteBuffer));

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void receive() {

		InputStream in = endpoint.client.getInputStream();

		log.info("Client (" + this.getClass() + ") received stream: "
				+ in.toString());

	}

	public void closeConnection() {
		endpoint.client.close(); // Close the socket and its streams
	}

	@Override
	public void run() {

		while (!isInterrupted()) {
			try {
				Thread.sleep(THREAD_SLEEP);
				log.trace("Thread active: " + this.getName() + " wait time: "
						+ THREAD_SLEEP);

				InputStream in = endpoint.client.getInputStream();

			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

	}
}
