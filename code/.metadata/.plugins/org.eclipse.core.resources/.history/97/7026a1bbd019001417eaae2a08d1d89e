package ch.desm.middleware.modules.component.interlocking.obermattlangnau;

import java.util.ArrayList;

import ch.desm.middleware.modules.communication.broker.Broker;
import ch.desm.middleware.modules.communication.endpoint.EndpointCommon;
import ch.desm.middleware.modules.communication.endpoint.serial.ubw32.EndpointUbw32ListenerInterface;
import ch.desm.middleware.modules.communication.message.router.MessageRouter;
import ch.desm.middleware.modules.communication.message.translator.MessageTranslatorMiddleware;
import ch.desm.middleware.modules.communication.message.type.MessageBase;
import ch.desm.middleware.modules.communication.message.type.MessageMiddleware;
import ch.desm.middleware.modules.communication.message.type.MessageUbw32Analog;
import ch.desm.middleware.modules.communication.message.type.MessageUbw32Digital;

public class OMLBaseImpl extends OMLBase implements
		EndpointUbw32ListenerInterface {

	public OMLBaseImpl(Broker broker, EndpointCommon communicationEndpointUbw32) {
		super(broker, communicationEndpointUbw32);
		
	}

	protected void onIncomingBrokerMessage(String message) {
		//System.out.println("broker (" + this.getClass() + ") received message: " + message);

		MessageTranslatorMiddleware translator = new MessageTranslatorMiddleware();
		ArrayList<MessageMiddleware> messageCommon = translator
				.translateToCommonMiddlewareMessageList(message);

		MessageRouter router = new MessageRouter();
		router.processBrokerMessage(this, messageCommon);
	}

	/**
	 * TODO implementation
	 * 
	 * @param message
	 */
	public void onIncomingEndpointMessage(String message) {
		//System.out.println("endpoint (" + getEndpoint().getSerialPortName() + ") received message: " + message);
		
		//TODO implementation
	}

	/**
	 * TODO implementation
	 * 
	 * @param message
	 */
	public String processInputs(MessageUbw32Digital message) {

		String middlewareMessagesInput = "";


		return middlewareMessagesInput;
	}

	/**
	 * TODO implementation
	 * 
	 * @param message
	 */
	public String processInputs(MessageUbw32Analog message) {

		String middlewareMessagesInput = "";

		return middlewareMessagesInput;
	}

	/**
	 * 
	 * @param port
	 * @param pin
	 * @param value
	 */
	@Override
	public void setPinOutputDigital(String port, String pin, String value) {
		this.endpoint.sendCommandPinOutput(port, pin, value);
	};

	/**
	 * 
	 * @param message
	 */
	@Override
	public void getPinInputDigital(String port, String pin) {
		this.endpoint.sendCommandPinInput(port, pin);
	}

	/**
	 * 
	 */
	@Override
	public boolean hasTopicSigned(String topic) {
		return signedTopic.contains(topic);
	}

	/**
	 * 
	 */
	@Override
	protected void intializeSignedTopic() {
		signedTopic.add(MessageBase.MESSAGE_TOPIC_SIMULATION_LOCSIM);
		signedTopic
				.add(MessageBase.MESSAGE_TOPIC_INTERLOCKING_OBERMATT_LANGNAU);
		signedTopic.add(MessageBase.MESSAGE_TOPIC_SIMULATION_LOCSIM_DLL);
		signedTopic.add(MessageBase.MESSAGE_TOPIC_TEST);
	}

	@Override
	public void getPinInputAnalog() {
		// TODO Auto-generated method stub
		
	}
}
